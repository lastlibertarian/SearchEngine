#pragma once

#include <vector>
#include <string>
#include <map>

/**
 * @struct Entry
 * @brief Структура для хранения идентификатора документа и количества слов.
 *
 * Эта структура используется для хранения идентификатора документа и количества вхождений слова в этот документ.
 */
struct Entry {
    size_t doc_id, count;

    /**
     * @brief Сравнивает два объекта Entry на равенство.
     *
     * @param other Объект Entry для сравнения.
     * @return true, если и doc_id, и count равны, иначе false.
     */
    bool operator==(const Entry &other) const;
};

/**
 * @class InvertedIndex
 * @brief Класс для создания и управления инвертированным индексом.
 *
 * Этот класс предоставляет функциональность для создания инвертированного индекса из набора документов и
 * получения количества слов для конкретного слова в документах.
 */
class InvertedIndex {
public:
    /**
     * @brief Конструктор по умолчанию для InvertedIndex.
     *
     * Инициализирует новый экземпляр класса InvertedIndex.
     */
    InvertedIndex() = default;

    /**
     * @brief Обновляет базу документов и строит инвертированный индекс.
     *
     * Этот метод принимает вектор строк, где каждая строка представляет собой документ,
     * и обновляет базу документов и инвертированный индекс (частотный словарь).
     *
     * @param input_docs Вектор строк, где каждая строка является документом.
     */
    void UpdateDocumentBase(std::vector<std::string> input_docs);

    /**
     * @brief Получает количество слов для конкретного слова.
     *
     * Этот метод принимает слово и возвращает вектор объектов Entry,
     * где каждый Entry содержит идентификатор документа и количество слов в этом документе.
     *
     * @param word Слово, для которого нужно получить количество.
     * @return Вектор объектов Entry для указанного слова.
     */
    std::vector<Entry> GetWordCount(const std::string &word);

private:
    std::vector<std::string> docs; ///< Вектор для хранения документов.
    std::map<std::string, std::vector<Entry>> freq_dictionary; ///< Карта для хранения инвертированного индекса.
};
